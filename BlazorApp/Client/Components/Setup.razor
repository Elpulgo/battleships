@using Core.Utilities 
@using Core.Models.Ships 
@using static Core.Models.Ships.ShipConstants
@using Core.Models
@using static Core.Models.CoordinatesHelper

@using Client.Models
@using Client.Services

@inject IGamePlayService GamePlayService


<h4>Setup</h4>
<hr>
@if(IsReady){
    <small>Waiting for other player to finish setup.. Hold on.</small>
} else {
    <small>Mark your ships or generate random coordinates for all ships.</small>
    <hr>
    <BoardWrapper>
        @foreach (var row in Enumerable.Range(1, Core.Utilities.GameConstants.MaxRowCount))
        {   
            <div class="row no-gutters">
                <div class="col table-cell-row">
                    @row
                </div>
                @foreach(Column column in Enum.GetValues(typeof(Column))){
                    @if(MarkedCoordinates.TryGetValue(CoordinateKey.Build(column, row), out CoordinateContainerBase coordContainer)){
                        <BlazorApp.Client.Components.Cell 
                            Type="@CellType.Flag"
                            Column="@column"
                            Row="@row"
                            Color="@coordContainer.Color">
                        </BlazorApp.Client.Components.Cell>
                    } else {
                        <BlazorApp.Client.Components.Cell 
                            Type="@CellType.None"
                            Column="@column"
                            Row="@row"
                            OnClicked="@OnCoordinateClicked">
                        </BlazorApp.Client.Components.Cell>

                    }
                }
            </div>
        }
    </BoardWrapper>
    @if(!String.IsNullOrEmpty(ErrorMessage)){
        <ErrorMessage Error="@ErrorMessage"></ErrorMessage>
    }
    <hr>
    <SetupIndicator ShipsTypesToCreate="@ShipsTypesToCreate" CoordinateCount="@CoordinatesForCurrentShip.Count">
    </SetupIndicator>

    @if(!ShipsTypesToCreate.Any()){
        <button class="btn btn-success mt-2" @onclick=OnReady>Start game!</button>
    }

    <button class="btn btn-secondary mt-2" @onclick=OnGenerateShips>Generate ships</button>
}

@code {
    [CascadingParameter]
    public Player Player { get; set; }

    public bool IsReady;
    private List<ShipType> ShipsTypesToCreate;
    private List<CoordinateContainerBase> CoordinatesForCurrentShip;
    private List<Ship> Ships { get; set; }
    private Dictionary<string, CoordinateContainerBase> MarkedCoordinates;

    private string ErrorMessage;

    protected override Task OnInitializedAsync()
    {
        Ships = new List<Ship>();
        CoordinatesForCurrentShip = new List<CoordinateContainerBase>();
        MarkedCoordinates = new Dictionary<string, CoordinateContainerBase>();

        ShipsTypesToCreate = ShipConstants.GetShipTypesPerPlayer().ToList();

        return Task.CompletedTask;
    }

    public void OnCoordinateClicked(CoordEventArgs eventArgs)
    {
        ClearErrorMessage();

        if (!ShipsTypesToCreate.Any())
            return;

        var currentShipType = ShipsTypesToCreate.FirstOrDefault();

        var coordContainer = new CoordinateContainerBase(eventArgs.Column, eventArgs.Row)
            .WithColor(ShipConstants.GetColor(currentShipType));

        CoordinatesForCurrentShip.Add(coordContainer);
        MarkedCoordinates.Add(coordContainer.Key, coordContainer);

        if (CoordinatesForCurrentShip.Count < currentShipType.NrOfBoxes())
            return;

        TryCreateShip(currentShipType);
    }
    public async Task OnReady()
    {
        await GamePlayService.PlayerReadyAsync(Ships);
        IsReady = true;
    }

    public void OnGenerateShips()
    {
        Ships = new ShipGenerator().Generate().ToList();

        MarkedCoordinates.Clear();

        foreach (var ship in Ships)
        {
            foreach (var coord in ship.Coordinates)
            {
                MarkedCoordinates.Add(coord.Key, coord);
            }
        }

        ShipsTypesToCreate.Clear();
    }

    private void TryCreateShip(ShipType currentShipType)
    {
        try
        {
            var ship = new Ship(currentShipType, CoordinatesForCurrentShip.Select(s => (s.Column, s.Row)).ToList());
            Ships.Add(ship);
            ShipsTypesToCreate.RemoveAt(0);
        }
        catch (ShipValidationException shipValidationException)
        {
            ErrorMessage = shipValidationException.Message;
            ResetCurrentCoordinates();
        }
        finally
        {
            ClearCurrentShipCoordinates();
        }
    }

    private void ResetCurrentCoordinates()
    {
        foreach (var coord in CoordinatesForCurrentShip)
        {
            MarkedCoordinates.Remove(coord.Key);
        }
    }

    private void ClearCurrentShipCoordinates() => CoordinatesForCurrentShip.Clear();

    private void ClearErrorMessage() => ErrorMessage = String.Empty;
}