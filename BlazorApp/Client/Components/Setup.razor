@using Core.Utilities 
@using Core.Models.Ships 
@using static Core.Models.Ships.ShipConstants
@using Core.Factories;
@using Core.Models
@using Client.Models 
@using static Core.Models.CoordinatesHelper

<h4>Setup</h4>
<hr>
<BoardWrapper>
    @foreach (var row in Enumerable.Range(1, Core.Utilities.GameConstants.MaxRowCount))
    {   
        <div class="row no-gutters">
            <div class="col table-cell-row">
                @row
            </div>
            @foreach(Column column in Enum.GetValues(typeof(Column))){
                @if(MarkedCoordinates.TryGetValue(CoordinateKey.Build(column, row), out CoordinateContainer coordContainer)){
                    <BlazorApp.Client.Components.Cell 
                        Type="@CellType.Flag"
                        Column="@column"
                        Row="@row"
                        Color="@coordContainer.Color"
                        />
                } else {
                    <BlazorApp.Client.Components.Cell 
                        Type="@CellType.None"
                        Column="@column"
                        Row="@row"
                        OnClicked="@OnCoordinateClicked" />
                }
            }
        </div>
    }
</BoardWrapper>
@if(!String.IsNullOrEmpty(ErrorMessage)){
    <hr>
    <div style="color: red; font-weight:bold;">@ErrorMessage</div>
}
<hr>
<SetupIndicator ShipsTypesToCreate="@ShipsTypesToCreate" CoordinateCount="@CoordinatesForCurrentShip.Count" />

@code {
   
    private List<ShipType> ShipsTypesToCreate;
    private List<CoordinateContainer> CoordinatesForCurrentShip;
    private List<IShip> Ships { get; set; }
    private ShipFactory _factory;
    private Dictionary<string, CoordinateContainer> MarkedCoordinates;

    private string ErrorMessage;

    protected override Task OnInitializedAsync()
    {
        _factory = new ShipFactory();
        Ships = new List<IShip>();
        CoordinatesForCurrentShip = new List<CoordinateContainer>();
        MarkedCoordinates = new Dictionary<string, CoordinateContainer>();

        ShipsTypesToCreate = ShipConstants.GetShipTypesPerPlayer().ToList();

        return Task.CompletedTask;
    }

    public void OnCoordinateClicked(CoordEventArgs eventArgs)
    {
        ClearErrorMessage();

        if (!ShipsTypesToCreate.Any())
            return;

        var currentShipType = ShipsTypesToCreate.FirstOrDefault();

        var coordContainer = new CoordinateContainer(eventArgs.Column, eventArgs.Row)
            .WithColor(ShipConstants.GetColor(currentShipType));

        CoordinatesForCurrentShip.Add(coordContainer);
        MarkedCoordinates.Add(coordContainer.Key, coordContainer);

        if (CoordinatesForCurrentShip.Count < currentShipType.NrOfBoxes())
            return;

        TryCreateShip(currentShipType);
    }

    private void TryCreateShip(ShipType currentShipType)
    {
        try
        {
            var ship = _factory.Build(currentShipType, CoordinatesForCurrentShip.Select(s => (s.Column, s.Row)));
            Ships.Add(ship);
            ShipsTypesToCreate.RemoveAt(0);
        }
        catch (ShipBuildException shipBuildException)
        {
            ErrorMessage = shipBuildException.Message;
            ResetCurrentCoordinates();
        }
        catch (ShipValidationException shipValidationException)
        {
            ErrorMessage = shipValidationException.Message;
            ResetCurrentCoordinates();
        }
        finally
        {
            ClearCurrentShipCoordinates();
        }
    }

    private void ResetCurrentCoordinates()
    {
        foreach (var coord in CoordinatesForCurrentShip)
        {
            MarkedCoordinates.Remove(coord.Key);
        }
    }

    private void ClearCurrentShipCoordinates() => CoordinatesForCurrentShip.Clear();

    private void ClearErrorMessage() => ErrorMessage = String.Empty;
}