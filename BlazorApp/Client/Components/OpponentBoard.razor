@using Core.Utilities 
@using Core.Models.Ships 
@using Core.Models 
@using Client.Models 
@using static Core.Models.CoordinatesHelper
@using Client.Services

@inject IGamePlayService GamePlayService

<BoardHeader
    HeaderText=@($"{OpponentGameBoard?.Player?.Name} board")
    InfoText=@(IsPlayerTurn ? "Your turn!" : "Waiting for opponent to make a move..")
    InfoClassName=@(IsPlayerTurn ? "green bold" : "red bold")>
</BoardHeader>

<BoardWrapper>
    @foreach (var row in Enumerable.Range(1, Core.Utilities.GameConstants.MaxRowCount))
    {   
        <div class="row no-gutters">
            <div class="col table-cell-row">
                @row
            </div>
            @foreach(Column column in Enum.GetValues(typeof(Column))){
                {
                    var coordContainer = OpponentGameBoard.Matrix[CoordinateKey.Build(column, row)];

                    var (cellType, color) = 
                        (coordContainer.IsShipDestroyed, coordContainer.HasShip, coordContainer.IsMarked) switch{
                            (true, _, _) => (CellType.Target, coordContainer.Color),
                            (false, true, true) => (CellType.Target, Color.Red),
                            (false, false, true) => (CellType.X, Color.LightGrey),
                            _ => (CellType.None, Color.None)
                        };

                    if(cellType != CellType.None){
                        <BlazorApp.Client.Components.Cell 
                            Type=cellType
                            Column=column
                            Row=row
                            Color=color    
                            CellState=@(IsPlayerTurn ? CellState.None : CellState.Waiting)  
                        />
                    } else {
                        <BlazorApp.Client.Components.Cell 
                            Type=cellType
                            Column=column
                            Row=row
                            Color=color 
                            CellState=@(!IsPlayerTurn ? CellState.Waiting : CellState.None)  
                            OnClicked=@OnCoordinateClicked   
                        />
                    }
                }
            }
        </div>
    }
</BoardWrapper>


@code {
    [CascadingParameter(Name = "OpponentGameBoard")]
    protected GameBoardBase OpponentGameBoard { get; set; }

    [CascadingParameter(Name = "IsPlayerTurn")]
    protected bool IsPlayerTurn { get; set; }

    public async void OnCoordinateClicked(CoordEventArgs eventArgs)
        => await GamePlayService.MarkCoordinateAsync(eventArgs.Column, eventArgs.Row);
}