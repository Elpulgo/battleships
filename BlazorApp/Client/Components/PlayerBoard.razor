@using Core.Utilities 
@using Core.Models.Ships 
@using Core.Models 
@using Client.Models 
@using static Core.Models.CoordinatesHelper
@using Client.Services

@inject IEventListener EventListener
@implements IDisposable

<BoardHeader
    HeaderText="Your board"
    InfoText=@OpponentMove
    InfoClassName="light_green bold">
</BoardHeader>

<BoardWrapper>
    @foreach (var row in Enumerable.Range(1, Core.Utilities.GameConstants.MaxRowCount))
    {   
        <div class="row no-gutters">
            <div class="col table-cell-row">
                @row
            </div>
            @foreach(Column column in Enum.GetValues(typeof(Column))){              
                var coordContainer = GameBoard.Matrix[CoordinateKey.Build(column, row)];

                var (cellType, color) = 
                    (coordContainer.IsShipDestroyed, coordContainer.HasShip, coordContainer.IsMarked) switch{
                        (true, _, _) => (CellType.Target, coordContainer.Color),
                        (false, true, true) => (CellType.Flag, Color.Red),
                        (false, true, false) => (CellType.Flag, coordContainer.Color),
                        (false, false, true) => (CellType.X, Color.LightGrey),
                        _ => (CellType.None, Color.None)
                    };

                <BlazorApp.Client.Components.Cell 
                    Type=cellType
                    Column=column
                    Row=row
                    Color=color   
                    CellState=CellState.Disabled  
                />
            }
        </div>
    }
</BoardWrapper>


@code {
    [CascadingParameter(Name = "GameBoard")]
    protected GameBoardBase GameBoard { get; set; }
    protected string OpponentMove { get; set; } = "...";

    protected override void OnInitialized()
        => EventListener.OpponentMoveFiredEventChanged += HandleOpponentMoveFired;

    private void HandleOpponentMoveFired(object sender, (bool shipWasHit, bool shipWasDestroyed) result)
    {
        OpponentMove = result switch
        {
            (true, true) => "Your ship was HIT, and DESTROYED!",
            (true, false) => "Your ship was HIT!",
            (_, _) => "Opponent MISSED.."
        };
    }

    public void Dispose()
        => EventListener.OpponentMoveFiredEventChanged -= HandleOpponentMoveFired;
}