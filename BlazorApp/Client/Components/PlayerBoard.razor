@using Core.Utilities 
@using Core.Models.Ships 
@using Core.Models 
@using Client.Models 
@using static Core.Models.CoordinatesHelper

<h3>Your board</h3>
<BoardWrapper>
    @foreach (var row in Enumerable.Range(1, Core.Utilities.GameConstants.MaxRowCount))
    {   
        <div class="row no-gutters">
            <div class="col table-cell-row">
                @row
            </div>
            @foreach(Column column in Enum.GetValues(typeof(Column))){
                {
                    var coordContainer = GameBoard.Matrix[CoordinateKey.Build(column, row)];
                    if(coordContainer.IsShipDestroyed) {
                        <BlazorApp.Client.Components.Cell 
                            Type=CellType.Target
                            Column=column
                            Row=row
                            Color=Color.Red         
                            />
                    } else if(coordContainer.HasShip) {
                        <BlazorApp.Client.Components.Cell 
                            Type=CellType.Flag
                            Column=column
                            Row=row
                            Color=coordContainer.Color
                             />
                    } else if(coordContainer.IsMarked) {
                        <BlazorApp.Client.Components.Cell 
                            Type=CellType.X
                            Column=column
                            Row=row
                            Color=Color.LightGrey
                            />
                    } else {
                        <BlazorApp.Client.Components.Cell 
                            Type=CellType.None
                            Column=column
                            Row=row
                            />
                    }
                }
            }
        </div>
    }
</BoardWrapper>


@code {
    [CascadingParameter(Name = "GameBoard")]
    protected GameBoardBase GameBoard { get; set; }

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    public void OnCoordinateClicked(CoordEventArgs eventArgs)
    {
        @* var (shipFound, shipDestroyed) = GameBoard.MarkCoordinate(CoordinateKey.Build(eventArgs.Column, eventArgs.Row));

        Console.WriteLine("Ship was found: " + shipFound);
        Console.WriteLine("Ship was destoryed: " + shipDestroyed); *@

        StateHasChanged();
    }
}