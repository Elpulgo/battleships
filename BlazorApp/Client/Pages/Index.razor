@page "/"
@using Core.Utilities
@using Core.Models

@using BlazorApp.Client.Components
@using Client.Services

@inject IEventService EventService
@inject IMessageService MessageService
@inject IGamePlayService GamePlayService
@implements IDisposable

@if(GameIsAvailable){
    <CascadingValue Value="@GameMode">
    <CascadingValue Value="@Player">
    <hr>
    @switch (GameMode)
    {
        case GameMode.CreatingPlayer:
            <CreatePlayer></CreatePlayer>
            break;
        case GameMode.WaitingForPlayerToJoin:
            <div>Waiting for other player to join game.. Hold on.</div>
            break;
        case GameMode.Setup:
            <Setup></Setup>
            break;
        case GameMode.WaitingForPlayerSetup:
            <div>Waiting for other player to setup ships.. Hold on.</div>
            break;
        case GameMode.GamePlay:
            <h3>GAMEPLAY MODE!!!</h3>
            break;
        case GameMode.GameEnded:
            break;
        default:
            break;
    }
    </CascadingValue>
    </CascadingValue>
} else {
    <div>Game is not available. Has already reached max number of players!</div>
}

@code {
    public GameMode GameMode = GameMode.CreatingPlayer;
    public GameBoard GameBoard;
    public Player Player;
    public bool GameIsAvailable = false;

    protected override async Task OnInitializedAsync()
    {
        GameIsAvailable = GamePlayService.IsPlayerSlotAvailable;
        SubscribeToEvents();
    }

    public void SubscribeToEvents()
    {
        EventService.GameModeEventChanged += HandleGameModeChanged;
        EventService.PlayerCreatedEventChanged += HandlePlayerCreatedChanged;
        EventService.GameBoardEventChanged += HandleGameBoardChanged;
    }

    private async void HandleGameModeChanged(object sender, GameMode gameMode)
    {
        if (gameMode == GameMode.GamePlay)
        {
            await GamePlayService.LoadGameBoardAsync();
        }
        GameMode = gameMode;
        StateHasChanged();
    }

    private void HandlePlayerCreatedChanged(object sender, Player player)
    {
        Player = player;
        StateHasChanged();
    }
    private void HandleGameBoardChanged(object sender, GameBoard gameBoard)
    {
        GameBoard = gameBoard;
        StateHasChanged();
    }

    public void Dispose()
    {
        EventService.GameModeEventChanged -= HandleGameModeChanged;
        EventService.PlayerCreatedEventChanged -= HandlePlayerCreatedChanged;
        EventService.GameBoardEventChanged -= HandleGameBoardChanged;
    }
}
