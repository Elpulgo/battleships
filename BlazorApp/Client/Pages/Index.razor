@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Core.Utilities
@inject NavigationManager NavigationManager
@implements IDisposable

<hr>

<div class="container-fluid p-0">
    <div class="row no-gutters">
        <div class="col table-cell-header"></div>
        @foreach(var column in Enum.GetValues(typeof(Core.Models.CoordinatesHelper.Column))){
            <div class="col table-cell-header">@column.ToString()</div>
        }
    </div>
    @foreach (var row in Enumerable.Range(1, Core.Utilities.GameConstants.MaxRowCount))
    {   
        <div class="row no-gutters">
            <div class="col table-cell-header">
                @row
            </div>
            @foreach(Core.Models.CoordinatesHelper.Column column in Enum.GetValues(typeof(Core.Models.CoordinatesHelper.Column))){
                @if((row == 6 || row == 7 || row == 2) && (column == Core.Models.CoordinatesHelper.Column.C)){
                    <div class="col table-cell">*</div>
                }else{

                <div class="col table-cell"></div>
                }
            }
        </div>
    }
</div>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private List<string> items = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var generator = new ShipGenerator();
        var ships = generator.Generate();

        items = ships.Select(ship => ship.Name).ToList();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("CoordinateMarked", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string, string>("GameFinished", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string, string>("OpponentReady", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}