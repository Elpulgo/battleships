@page "/"
@using Core.Utilities
@using Core.Models.Ships
@using Core.Models

@using BlazorApp.Client.Components
@using Client.Services

@inject IEventService EventService
@inject IMessageService MessageService
@inject IGamePlayService GamePlayService
@implements IDisposable

@if(GameIsAvailable){
    <CascadingValue Value="@GameMode">
    <CascadingValue Value="@Player">
    <hr>
        <span>@GameMode.ToString()</span>
        <span>@Player?.Name.ToString()</span>

        <hr>
        @switch (GameMode)
        {
            case GameMode.CreatingPlayer:
                <CreatePlayer></CreatePlayer>
                break;
            case GameMode.Setup:
                <Setup></Setup>
                break;
            case GameMode.WaitingForPlayer:
                <div>Waiting for other player..</div>
                break;
            default:
                break;
        }
        @* <h1>Your board</h1> *@
        @* <PlayerBoard GameMode=@GameMode.Setup OnAllShipsMarked=@OnAllShipsMarked /> *@
    </CascadingValue>
    </CascadingValue>
} else {
    <div>Game is not available. Has already reached max number of players!</div>
}

@code {
    public GameMode GameMode = GameMode.CreatingPlayer;
    public Player Player;
    public bool GameIsAvailable = false;

    protected override async Task OnInitializedAsync()
    {
        GameIsAvailable = GamePlayService.IsPlayerSlotAvailable;
        SubscribeToEvents();
        var generator = new ShipGenerator();
        var ships = generator.Generate().ToList();
    }

    public void SubscribeToEvents()
    {
        EventService.GameModeEventChanged += HandleGameModeChanged;
        EventService.PlayerCreatedEventChanged += HandlePlayerCreatedChanged;
    }

    private void HandleGameModeChanged(object sender, GameMode gameMode)
    {
        GameMode = gameMode;
        StateHasChanged();
    }

    private void HandlePlayerCreatedChanged(object sender, Player player)
    {
        Player = player;
        StateHasChanged();
    }

    public void Dispose()
    {
        EventService.GameModeEventChanged -= HandleGameModeChanged;
        EventService.PlayerCreatedEventChanged -= HandlePlayerCreatedChanged;
    }
}
