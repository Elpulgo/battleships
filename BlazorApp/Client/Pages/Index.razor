@page "/"
@using Core.Utilities
@using Core.Models

@using BlazorApp.Client.Components
@using Client.Services

@inject IEventListener EventListener
@inject IMessageService MessageService
@inject IGamePlayService GamePlayService
@implements IDisposable

@if(GameIsAvailable){
    <CascadingValue Value="@GameMode">
    <CascadingValue Value="@Player">
    <CascadingValue Value="@GameBoard" Name="GameBoard">
    <CascadingValue Value="@OpponentGameBoard" Name="OpponentGameBoard">
    <CascadingValue Value="@IsPlayerTurn" Name="IsPlayerTurn">

    @switch (GameMode)
    {
        case GameMode.CreatingPlayer:
            <CreatePlayer></CreatePlayer>
            break;
        case GameMode.WaitingForPlayerToJoin:
            <div>Waiting for other player to join game.. Hold on.</div>
            break;
        case GameMode.Setup:
            <Setup></Setup>
            break;
        case GameMode.WaitingForPlayerSetup:
            <div>Waiting for other player to setup ships.. Hold on.</div>
            break;
        case GameMode.GamePlay:
            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <OpponentBoard></OpponentBoard>
                    </div>
                    <div class="col-6">
                        <PlayerBoard></PlayerBoard>
                    </div>
                </div>
            </div>            
            break;
        case GameMode.GameEnded:
            break;
        default:
            break;
    }
    </CascadingValue>
    </CascadingValue>
    </CascadingValue>
    </CascadingValue>
    </CascadingValue>
} else {
    <div>Game is not available. Has already reached max number of players!</div>
}

@code {
    public GameMode GameMode = GameMode.CreatingPlayer;
    protected GameBoardBase GameBoard { get; private set; }
    protected GameBoardBase OpponentGameBoard { get; private set; }
    public bool IsPlayerTurn { get; private set; }
    public Player Player { get; private set; }
    public bool GameIsAvailable = false;

    protected override Task OnInitializedAsync()
    {
        GameIsAvailable = GamePlayService.IsPlayerSlotAvailable;
        SubscribeToEvents();
        return Task.CompletedTask;
    }

    public void SubscribeToEvents()
    {
        EventListener.GameModeEventChanged += HandleGameModeChanged;
        EventListener.PlayerCreatedEventChanged += HandlePlayerCreatedChanged;
        EventListener.GameBoardEventChanged += HandleGameBoardChanged;
        EventListener.OpponentGameBoardEventChanged += HandleOpponentGameBoardChanged;
        EventListener.ReloadGameBoardEventChanged += HandleGameBoardReload;
        EventListener.ReloadOpponentGameBoardEventChanged += HandleOpponentGameBoardReload;
        EventListener.PlayerTurnEventChanged += HandlePlayerTurnChanged;
    }

    private async void HandleGameModeChanged(object sender, GameMode gameMode)
    {
        if (gameMode == GameMode.GamePlay)
        {
            await GamePlayService.LoadGameBoardAsync();
            await GamePlayService.LoadOpponentGameBoardAsync();
        }
        GameMode = gameMode;
        StateHasChanged();
    }

    private void HandlePlayerCreatedChanged(object sender, Player player)
    {
        Player = player;
        StateHasChanged();
    }
    private void HandleGameBoardChanged(object sender, GameBoardBase gameBoard)
    {
        GameBoard = gameBoard;
        StateHasChanged();
    }

    private void HandleOpponentGameBoardChanged(object sender, GameBoardBase gameBoard)
    {
        OpponentGameBoard = gameBoard;
        StateHasChanged();
    }

    private async void HandleGameBoardReload(object sender, EventArgs e)
    {
        await GamePlayService.LoadGameBoardAsync();
        StateHasChanged();
    }

    private async void HandleOpponentGameBoardReload(object sender, EventArgs e)
    {
        await GamePlayService.LoadOpponentGameBoardAsync();
        StateHasChanged();
    }

    private void HandlePlayerTurnChanged(object sender, bool isPlayerTurn)
    {
        IsPlayerTurn = isPlayerTurn;
        StateHasChanged();
    }

    public void Dispose()
    {
        EventListener.GameModeEventChanged -= HandleGameModeChanged;
        EventListener.PlayerCreatedEventChanged -= HandlePlayerCreatedChanged;
        EventListener.GameBoardEventChanged -= HandleGameBoardChanged;
        EventListener.OpponentGameBoardEventChanged -= HandleOpponentGameBoardChanged;
        EventListener.ReloadGameBoardEventChanged -= HandleGameBoardReload;
        EventListener.ReloadOpponentGameBoardEventChanged -= HandleOpponentGameBoardReload;
        EventListener.PlayerTurnEventChanged -= HandlePlayerTurnChanged;
    }
}
