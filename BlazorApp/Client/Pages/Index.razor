@page "/"
@using Core.Utilities
@using Core.Models.Ships
@using Core.Models

@using BlazorApp.Client.Components
@using Client.Services

@inject IEventService EventService
@inject IMessageService MessageService
@implements IDisposable

<CascadingValue Value="@GameMode">
<CascadingValue Value="@Player">

    @* <hr>
    <h1>Opponent board</h1> *@

    @* <OpponentBoard /> *@

    <hr>
    <span>@GameMode.ToString()</span>
    <span>@Player?.Name.ToString()</span>

    <hr>
    @switch (GameMode)
    {
        case GameMode.CreatingPlayer:
            <CreatePlayer></CreatePlayer>
            break;
        case GameMode.Setup:
            <Setup></Setup>
            break;
        default:
            break;
    }
    @* <h1>Your board</h1> *@
    @* <PlayerBoard GameMode=@GameMode.Setup OnAllShipsMarked=@OnAllShipsMarked /> *@
</CascadingValue>
</CascadingValue>


@code {
    public GameMode GameMode = GameMode.CreatingPlayer;
    public Player Player;
    protected override async Task OnInitializedAsync()
    {

        SubscribeToEvents();
        var generator = new ShipGenerator();
        var ships = generator.Generate().ToList();
    }

    public void SubscribeToEvents()
    {
        EventService.GameModeEventChanged += HandleGameModeChanged;
        EventService.PlayerCreatedEventChanged += HandlePlayerCreatedChanged;
    }

    private void HandleGameModeChanged(object sender, GameMode gameMode)
    {
        GameMode = gameMode;
        StateHasChanged();
    }

    private void HandlePlayerCreatedChanged(object sender, Player player)
    {
        Player = player;
        StateHasChanged();
    }

    public void Dispose()
    {
        EventService.GameModeEventChanged -= HandleGameModeChanged;
        EventService.PlayerCreatedEventChanged -= HandlePlayerCreatedChanged;
    }
}
